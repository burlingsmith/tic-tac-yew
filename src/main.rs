//! Tic-tac-toe written in Rust using the Yew framework.

mod board;

use std::collections::HashSet;
use std::iter::FromIterator;

use board::Board;

//////////////////////////////////////////////////////////////////////////////
// Convenience Aliases
//////////////////////////////////////////////////////////////////////////////

type Index = (usize, usize);

//////////////////////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////////////////////

#[derive(Clone, Copy, Debug, Eq, Hash, PartialEq)]
enum Player {
    X,
    O,
}

//////////////////////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////////////////////

#[derive(Debug)]
struct GameState {
    board: Board,
    turn: Player,
}

impl GameState {
    pub fn new() -> Self {
        unimplemented!();
    }
}

//////////////////////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////////////////////

fn main() {
    let mut value = "Heyo!";

    for i in 0..3 {
        if i == 1 {
            value = "Hello, World!";
            break;
        }
    }

    println!("{}", value);
}

//////////////////////////////////////////////////////////////////////////////
// Unit Tests
//////////////////////////////////////////////////////////////////////////////


#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_demo_win_for_x() {
        let mut game = GameState::new();

        unimplemented!();
    }

    #[test]
    fn test_demo_win_for_o() {
        let mut game = GameState::new();

        unimplemented!();
    }

    #[test]
    fn test_demo_draw() {
        let mut game = GameState::new();

        unimplemented!();
    }
}
